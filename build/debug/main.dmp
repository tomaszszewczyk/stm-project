
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000002c 	.word	0x2000002c
 800012c:	00000000 	.word	0x00000000
 8000130:	080037dc 	.word	0x080037dc

08000134 <frame_dummy>:
 8000134:	4b0c      	ldr	r3, [pc, #48]	; (8000168 <frame_dummy+0x34>)
 8000136:	b143      	cbz	r3, 800014a <frame_dummy+0x16>
 8000138:	480c      	ldr	r0, [pc, #48]	; (800016c <frame_dummy+0x38>)
 800013a:	b510      	push	{r4, lr}
 800013c:	490c      	ldr	r1, [pc, #48]	; (8000170 <frame_dummy+0x3c>)
 800013e:	f3af 8000 	nop.w
 8000142:	480c      	ldr	r0, [pc, #48]	; (8000174 <frame_dummy+0x40>)
 8000144:	6803      	ldr	r3, [r0, #0]
 8000146:	b923      	cbnz	r3, 8000152 <frame_dummy+0x1e>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	480a      	ldr	r0, [pc, #40]	; (8000174 <frame_dummy+0x40>)
 800014c:	6803      	ldr	r3, [r0, #0]
 800014e:	b933      	cbnz	r3, 800015e <frame_dummy+0x2a>
 8000150:	4770      	bx	lr
 8000152:	4b09      	ldr	r3, [pc, #36]	; (8000178 <frame_dummy+0x44>)
 8000154:	2b00      	cmp	r3, #0
 8000156:	d0f7      	beq.n	8000148 <frame_dummy+0x14>
 8000158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800015c:	4718      	bx	r3
 800015e:	4b06      	ldr	r3, [pc, #24]	; (8000178 <frame_dummy+0x44>)
 8000160:	2b00      	cmp	r3, #0
 8000162:	d0f5      	beq.n	8000150 <frame_dummy+0x1c>
 8000164:	4718      	bx	r3
 8000166:	bf00      	nop
 8000168:	00000000 	.word	0x00000000
 800016c:	080037dc 	.word	0x080037dc
 8000170:	20000030 	.word	0x20000030
 8000174:	2000002c 	.word	0x2000002c
 8000178:	00000000 	.word	0x00000000

0800017c <task>:
void Delay(vu32 nCount);

/* Private functions ---------------------------------------------------------*/

void task( void *pvParameters )
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* Turn on led connected to PC.4 pin */
    GPIO_SetBits(GPIOA, GPIO_Pin_All);
 8000184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <task+0x30>)
 800018a:	f000 faf6 	bl	800077a <GPIO_SetBits>
    /* Insert delay */
    vTaskDelay(pdMS_TO_TICKS(500));
 800018e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000192:	f001 fb4b 	bl	800182c <vTaskDelay>

    /* Turn off led connected to PC.4 pin */
    GPIO_ResetBits(GPIOA, GPIO_Pin_All);
 8000196:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <task+0x30>)
 800019c:	f000 fafb 	bl	8000796 <GPIO_ResetBits>
    /* Insert delay */
    vTaskDelay(pdMS_TO_TICKS(500));
 80001a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001a4:	f001 fb42 	bl	800182c <vTaskDelay>
    GPIO_SetBits(GPIOA, GPIO_Pin_All);
 80001a8:	e7ec      	b.n	8000184 <task+0x8>
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800

080001b0 <vApplicationStackOverflowHook>:
  }
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
 80001b8:	6039      	str	r1, [r7, #0]
  offending task. */

  ( void ) pxTask;
  ( void ) pcTaskName;

  for( ;; );
 80001ba:	e7fe      	b.n	80001ba <vApplicationStackOverflowHook+0xa>

080001bc <main>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af02      	add	r7, sp, #8
  prvSetupHardware();
 80001c2:	f000 f813 	bl	80001ec <prvSetupHardware>

  /* Create the uIP task.  The WEB server runs in this task. */
  xTaskCreate( task, "led", 1024, ( void * ) NULL, 0, NULL );
 80001c6:	2300      	movs	r3, #0
 80001c8:	9301      	str	r3, [sp, #4]
 80001ca:	2300      	movs	r3, #0
 80001cc:	9300      	str	r3, [sp, #0]
 80001ce:	2300      	movs	r3, #0
 80001d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001d4:	4903      	ldr	r1, [pc, #12]	; (80001e4 <main+0x28>)
 80001d6:	4804      	ldr	r0, [pc, #16]	; (80001e8 <main+0x2c>)
 80001d8:	f001 f934 	bl	8001444 <xTaskCreate>

    /* Start the scheduler. */
  vTaskStartScheduler();
 80001dc:	f001 fdce 	bl	8001d7c <vTaskStartScheduler>

    /* Will only get here if there was insufficient memory to create the idle
    task.  The idle task is created within vTaskStartScheduler(). */
  for( ;; );
 80001e0:	e7fe      	b.n	80001e0 <main+0x24>
 80001e2:	bf00      	nop
 80001e4:	080037f4 	.word	0x080037f4
 80001e8:	0800017d 	.word	0x0800017d

080001ec <prvSetupHardware>:
}

void prvSetupHardware(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* NVIC Configuration */
  NVIC_Configuration();
 80001f0:	f000 f818 	bl	8000224 <NVIC_Configuration>

  /* Enable GPIOC clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80001f4:	2101      	movs	r1, #1
 80001f6:	2004      	movs	r0, #4
 80001f8:	f000 fee4 	bl	8000fc4 <RCC_APB2PeriphClockCmd>
  
  /* Configure PC.4 as Output push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <prvSetupHardware+0x30>)
 80001fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000202:	801a      	strh	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <prvSetupHardware+0x30>)
 8000206:	2201      	movs	r2, #1
 8000208:	709a      	strb	r2, [r3, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <prvSetupHardware+0x30>)
 800020c:	2210      	movs	r2, #16
 800020e:	70da      	strb	r2, [r3, #3]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000210:	4902      	ldr	r1, [pc, #8]	; (800021c <prvSetupHardware+0x30>)
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <prvSetupHardware+0x34>)
 8000214:	f000 f998 	bl	8000548 <GPIO_Init>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20004968 	.word	0x20004968
 8000220:	40010800 	.word	0x40010800

08000224 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
#ifdef  VECT_TAB_RAM  
  /* Set the Vector Table base location at 0x20000000 */ 
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
#else  /* VECT_TAB_FLASH  */
  /* Set the Vector Table base location at 0x08000000 */ 
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
 8000228:	2100      	movs	r1, #0
 800022a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800022e:	f000 f8bb 	bl	80003a8 <NVIC_SetVectorTable>
#endif
  

  NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000232:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000236:	f000 f843 	bl	80002c0 <NVIC_PriorityGroupConfig>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}

0800023e <Delay>:
* Input          : nCount: specifies the delay time length.
* Output         : None
* Return         : None
*******************************************************************************/
void Delay(vu32 nCount)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000246:	e002      	b.n	800024e <Delay+0x10>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f9      	bne.n	8000248 <Delay+0xa>
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <assert_failed>:
*                  - line: assert_param error line source number
* Output         : None
* Return         : None
*******************************************************************************/
void assert_failed(u8* file, u32 line)
{ 
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 8000268:	e7fe      	b.n	8000268 <assert_failed+0xa>
 800026a:	bf00      	nop

0800026c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800027c:	e7fe      	b.n	800027c <HardFault_Handler+0x4>

0800027e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000282:	e7fe      	b.n	8000282 <MemManage_Handler+0x4>

08000284 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000288:	e7fe      	b.n	8000288 <BusFault_Handler+0x4>

0800028a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800028e:	e7fe      	b.n	800028e <UsageFault_Handler+0x4>

08000290 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <NVIC_PriorityGroupConfig+0x20>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60d3      	str	r3, [r2, #12]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	230f      	movs	r3, #15
 80002f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	78db      	ldrb	r3, [r3, #3]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d03a      	beq.n	8000376 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <NVIC_Init+0xbc>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	43db      	mvns	r3, r3
 8000306:	0a1b      	lsrs	r3, r3, #8
 8000308:	f003 0307 	and.w	r3, r3, #7
 800030c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	f1c3 0304 	rsb	r3, r3, #4
 8000314:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	461a      	mov	r2, r3
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	789b      	ldrb	r3, [r3, #2]
 8000332:	461a      	mov	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4013      	ands	r3, r2
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	4313      	orrs	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <NVIC_Init+0xc0>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	6979      	ldr	r1, [r7, #20]
 800034c:	b2c9      	uxtb	r1, r1
 800034e:	4413      	add	r3, r2
 8000350:	460a      	mov	r2, r1
 8000352:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000356:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <NVIC_Init+0xc0>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	095b      	lsrs	r3, r3, #5
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	f003 031f 	and.w	r3, r3, #31
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000370:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000374:	e00f      	b.n	8000396 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000376:	490b      	ldr	r1, [pc, #44]	; (80003a4 <NVIC_Init+0xc0>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	095b      	lsrs	r3, r3, #5
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	f003 031f 	and.w	r3, r3, #31
 800038a:	2201      	movs	r2, #1
 800038c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800038e:	f100 0320 	add.w	r3, r0, #32
 8000392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000396:	bf00      	nop
 8000398:	371c      	adds	r7, #28
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	e000e100 	.word	0xe000e100

080003a8 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80003b2:	4907      	ldr	r1, [pc, #28]	; (80003d0 <NVIC_SetVectorTable+0x28>)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80003ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	608b      	str	r3, [r1, #8]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d006      	beq.n	80003f8 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 80003ea:	4909      	ldr	r1, [pc, #36]	; (8000410 <NVIC_SystemLPConfig+0x3c>)
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <NVIC_SystemLPConfig+0x3c>)
 80003ee:	691a      	ldr	r2, [r3, #16]
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 80003f6:	e006      	b.n	8000406 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80003f8:	4905      	ldr	r1, [pc, #20]	; (8000410 <NVIC_SystemLPConfig+0x3c>)
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <NVIC_SystemLPConfig+0x3c>)
 80003fc:	691a      	ldr	r2, [r3, #16]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	43db      	mvns	r3, r3
 8000402:	4013      	ands	r3, r2
 8000404:	610b      	str	r3, [r1, #16]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d106      	bne.n	8000430 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <SysTick_CLKSourceConfig+0x34>)
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <SysTick_CLKSourceConfig+0x34>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800042e:	e005      	b.n	800043c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <SysTick_CLKSourceConfig+0x34>)
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <SysTick_CLKSourceConfig+0x34>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f023 0304 	bic.w	r3, r3, #4
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000e010 	.word	0xe000e010

0800044c <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <GPIO_DeInit+0xc8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d108      	bne.n	800046e <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800045c:	2101      	movs	r1, #1
 800045e:	2004      	movs	r0, #4
 8000460:	f000 fdec 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000464:	2100      	movs	r1, #0
 8000466:	2004      	movs	r0, #4
 8000468:	f000 fde8 	bl	800103c <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 800046c:	e04e      	b.n	800050c <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a29      	ldr	r2, [pc, #164]	; (8000518 <GPIO_DeInit+0xcc>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d108      	bne.n	8000488 <GPIO_DeInit+0x3c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000476:	2101      	movs	r1, #1
 8000478:	2008      	movs	r0, #8
 800047a:	f000 fddf 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800047e:	2100      	movs	r1, #0
 8000480:	2008      	movs	r0, #8
 8000482:	f000 fddb 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 8000486:	e041      	b.n	800050c <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a24      	ldr	r2, [pc, #144]	; (800051c <GPIO_DeInit+0xd0>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d108      	bne.n	80004a2 <GPIO_DeInit+0x56>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000490:	2101      	movs	r1, #1
 8000492:	2010      	movs	r0, #16
 8000494:	f000 fdd2 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000498:	2100      	movs	r1, #0
 800049a:	2010      	movs	r0, #16
 800049c:	f000 fdce 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 80004a0:	e034      	b.n	800050c <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <GPIO_DeInit+0xd4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d108      	bne.n	80004bc <GPIO_DeInit+0x70>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2020      	movs	r0, #32
 80004ae:	f000 fdc5 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80004b2:	2100      	movs	r1, #0
 80004b4:	2020      	movs	r0, #32
 80004b6:	f000 fdc1 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 80004ba:	e027      	b.n	800050c <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a19      	ldr	r2, [pc, #100]	; (8000524 <GPIO_DeInit+0xd8>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d108      	bne.n	80004d6 <GPIO_DeInit+0x8a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80004c4:	2101      	movs	r1, #1
 80004c6:	2040      	movs	r0, #64	; 0x40
 80004c8:	f000 fdb8 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80004cc:	2100      	movs	r1, #0
 80004ce:	2040      	movs	r0, #64	; 0x40
 80004d0:	f000 fdb4 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 80004d4:	e01a      	b.n	800050c <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOF)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a13      	ldr	r2, [pc, #76]	; (8000528 <GPIO_DeInit+0xdc>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d108      	bne.n	80004f0 <GPIO_DeInit+0xa4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80004de:	2101      	movs	r1, #1
 80004e0:	2080      	movs	r0, #128	; 0x80
 80004e2:	f000 fdab 	bl	800103c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2080      	movs	r0, #128	; 0x80
 80004ea:	f000 fda7 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 80004ee:	e00d      	b.n	800050c <GPIO_DeInit+0xc0>
    if (GPIOx == GPIOG)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <GPIO_DeInit+0xe0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d109      	bne.n	800050c <GPIO_DeInit+0xc0>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80004f8:	2101      	movs	r1, #1
 80004fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004fe:	f000 fd9d 	bl	800103c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000502:	2100      	movs	r1, #0
 8000504:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000508:	f000 fd98 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010800 	.word	0x40010800
 8000518:	40010c00 	.word	0x40010c00
 800051c:	40011000 	.word	0x40011000
 8000520:	40011400 	.word	0x40011400
 8000524:	40011800 	.word	0x40011800
 8000528:	40011c00 	.word	0x40011c00
 800052c:	40012000 	.word	0x40012000

08000530 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000534:	2101      	movs	r1, #1
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fd80 	bl	800103c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800053c:	2100      	movs	r1, #0
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fd7c 	bl	800103c <RCC_APB2PeriphResetCmd>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000548:	b480      	push	{r7}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	78db      	ldrb	r3, [r3, #3]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	78db      	ldrb	r3, [r3, #3]
 8000578:	f003 0310 	and.w	r3, r3, #16
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	461a      	mov	r2, r3
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	4313      	orrs	r3, r2
 800058a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d044      	beq.n	8000620 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	e038      	b.n	8000614 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80005a2:	2201      	movs	r2, #1
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005b8:	693a      	ldr	r2, [r7, #16]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d126      	bne.n	800060e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005c6:	220f      	movs	r2, #15
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	43db      	mvns	r3, r3
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	4013      	ands	r3, r2
 80005d8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005da:	69fa      	ldr	r2, [r7, #28]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	78db      	ldrb	r3, [r3, #3]
 80005ec:	2b28      	cmp	r3, #40	; 0x28
 80005ee:	d105      	bne.n	80005fc <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005f0:	2201      	movs	r2, #1
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	409a      	lsls	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	e008      	b.n	800060e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	2b48      	cmp	r3, #72	; 0x48
 8000602:	d104      	bne.n	800060e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000604:	2201      	movs	r2, #1
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	409a      	lsls	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	3301      	adds	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9c3      	bls.n	80005a2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	d946      	bls.n	80006b6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	e03a      	b.n	80006aa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	3308      	adds	r3, #8
 8000638:	2201      	movs	r2, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	429a      	cmp	r2, r3
 8000652:	d127      	bne.n	80006a4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800065a:	220f      	movs	r2, #15
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	43db      	mvns	r3, r3
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	4013      	ands	r3, r2
 800066c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800066e:	69fa      	ldr	r2, [r7, #28]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	4313      	orrs	r3, r2
 800067a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	2b28      	cmp	r3, #40	; 0x28
 8000682:	d105      	bne.n	8000690 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	3308      	adds	r3, #8
 8000688:	2201      	movs	r2, #1
 800068a:	409a      	lsls	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	78db      	ldrb	r3, [r3, #3]
 8000694:	2b48      	cmp	r3, #72	; 0x48
 8000696:	d105      	bne.n	80006a4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	3308      	adds	r3, #8
 800069c:	2201      	movs	r2, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b07      	cmp	r3, #7
 80006ae:	d9c1      	bls.n	8000634 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	605a      	str	r2, [r3, #4]
  }
}
 80006b6:	bf00      	nop
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ce:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2202      	movs	r2, #2
 80006d4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2204      	movs	r2, #4
 80006da:	70da      	strb	r2, [r3, #3]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	4013      	ands	r3, r2
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e001      	b.n	800070c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	b29b      	uxth	r3, r3
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	4013      	ands	r3, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e001      	b.n	8000756 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	b29b      	uxth	r3, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	611a      	str	r2, [r3, #16]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80007a2:	887a      	ldrh	r2, [r7, #2]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	615a      	str	r2, [r3, #20]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80007c2:	787b      	ldrb	r3, [r7, #1]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007c8:	887a      	ldrh	r2, [r7, #2]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80007ce:	e002      	b.n	80007d6 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80007d0:	887a      	ldrh	r2, [r7, #2]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	615a      	str	r2, [r3, #20]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60da      	str	r2, [r3, #12]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4313      	orrs	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800081c:	887a      	ldrh	r2, [r7, #2]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	60fb      	str	r3, [r7, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	460a      	mov	r2, r1
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	4613      	mov	r3, r2
 800084c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <GPIO_EventOutputConfig+0x46>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8000874:	4a03      	ldr	r2, [pc, #12]	; (8000884 <GPIO_EventOutputConfig+0x46>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40010000 	.word	0x40010000

08000888 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <GPIO_EventOutputCmd+0x1c>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	4220001c 	.word	0x4220001c

080008a8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da03      	bge.n	80008d2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e002      	b.n	80008d8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80008f2:	d10a      	bne.n	800090a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80008fa:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000906:	6053      	str	r3, [r2, #4]
 8000908:	e021      	b.n	800094e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00e      	beq.n	8000932 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000914:	2203      	movs	r2, #3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	43db      	mvns	r3, r3
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4013      	ands	r3, r2
 8000926:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00d      	b.n	800094e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4013      	ands	r3, r2
 8000944:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800094c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d008      	beq.n	8000966 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	0d5b      	lsrs	r3, r3, #21
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	4313      	orrs	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da03      	bge.n	8000974 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000972:	e002      	b.n	800097a <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <GPIO_PinRemapConfig+0xdc>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	6053      	str	r3, [r2, #4]
}
 800097a:	bf00      	nop
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40010000 	.word	0x40010000

08000988 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000988:	b490      	push	{r4, r7}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80009ac:	4916      	ldr	r1, [pc, #88]	; (8000a08 <GPIO_EXTILineConfig+0x80>)
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <GPIO_EXTILineConfig+0x80>)
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	401a      	ands	r2, r3
 80009ca:	1c83      	adds	r3, r0, #2
 80009cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <GPIO_EXTILineConfig+0x80>)
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461c      	mov	r4, r3
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <GPIO_EXTILineConfig+0x80>)
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	3302      	adds	r3, #2
 80009e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e8:	79f9      	ldrb	r1, [r7, #7]
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	1ca3      	adds	r3, r4, #2
 80009fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc90      	pop	{r4, r7}
 8000a06:	4770      	bx	lr
 8000a08:	40010000 	.word	0x40010000

08000a0c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	422000dc 	.word	0x422000dc

08000a28 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <RCC_DeInit+0x54>)
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <RCC_DeInit+0x54>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a38:	4910      	ldr	r1, [pc, #64]	; (8000a7c <RCC_DeInit+0x54>)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <RCC_DeInit+0x54>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <RCC_DeInit+0x58>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <RCC_DeInit+0x54>)
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <RCC_DeInit+0x54>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <RCC_DeInit+0x54>)
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <RCC_DeInit+0x54>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <RCC_DeInit+0x54>)
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <RCC_DeInit+0x54>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <RCC_DeInit+0x54>)
 8000a6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a72:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	f8ff0000 	.word	0xf8ff0000

08000a84 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <RCC_HSEConfig+0x58>)
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <RCC_HSEConfig+0x58>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <RCC_HSEConfig+0x58>)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <RCC_HSEConfig+0x58>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aaa:	d003      	beq.n	8000ab4 <RCC_HSEConfig+0x30>
 8000aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ab0:	d007      	beq.n	8000ac2 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000ab2:	e00d      	b.n	8000ad0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <RCC_HSEConfig+0x58>)
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <RCC_HSEConfig+0x58>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000abe:	6013      	str	r3, [r2, #0]
      break;
 8000ac0:	e006      	b.n	8000ad0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <RCC_HSEConfig+0x58>)
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <RCC_HSEConfig+0x58>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000acc:	6013      	str	r3, [r2, #0]
      break;
 8000ace:	bf00      	nop
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000af2:	2031      	movs	r0, #49	; 0x31
 8000af4:	f000 fb0e 	bl	8001114 <RCC_GetFlagStatus>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b08:	d002      	beq.n	8000b10 <RCC_WaitForHSEStartUp+0x30>
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f0      	beq.n	8000af2 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000b10:	2031      	movs	r0, #49	; 0x31
 8000b12:	f000 faff 	bl	8001114 <RCC_GetFlagStatus>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	e001      	b.n	8000b26 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <RCC_AdjustHSICalibrationValue+0x38>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b4a:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <RCC_AdjustHSICalibrationValue+0x38>)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <RCC_HSICmd+0x1c>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	42420000 	.word	0x42420000

08000b8c <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <RCC_PLLConfig+0x38>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ba6:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <RCC_PLLConfig+0x38>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6053      	str	r3, [r2, #4]
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <RCC_PLLCmd+0x1c>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	42420060 	.word	0x42420060

08000be8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <RCC_SYSCLKConfig+0x34>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f023 0303 	bic.w	r3, r3, #3
 8000c00:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <RCC_SYSCLKConfig+0x34>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6053      	str	r3, [r2, #4]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <RCC_GetSYSCLKSource+0x18>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000

08000c3c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <RCC_HCLKConfig+0x34>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c54:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <RCC_HCLKConfig+0x34>)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6053      	str	r3, [r2, #4]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <RCC_PCLK1Config+0x34>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c8c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <RCC_PCLK1Config+0x34>)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <RCC_PCLK2Config+0x34>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cc4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <RCC_PCLK2Config+0x34>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6053      	str	r3, [r2, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000cfa:	490c      	ldr	r1, [pc, #48]	; (8000d2c <RCC_ITConfig+0x48>)
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <RCC_ITConfig+0x48>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8000d0a:	e009      	b.n	8000d20 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <RCC_ITConfig+0x48>)
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <RCC_ITConfig+0x48>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	700b      	strb	r3, [r1, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021009 	.word	0x40021009

08000d30 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <RCC_USBCLKConfig+0x18>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	424200d8 	.word	0x424200d8

08000d4c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <RCC_ADCCLKConfig+0x34>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d64:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <RCC_ADCCLKConfig+0x34>)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6053      	str	r3, [r2, #4]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <RCC_LSEConfig+0x3c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <RCC_LSEConfig+0x3c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d002      	beq.n	8000da6 <RCC_LSEConfig+0x22>
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d004      	beq.n	8000dae <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000da4:	e007      	b.n	8000db6 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <RCC_LSEConfig+0x3c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
      break;
 8000dac:	e003      	b.n	8000db6 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <RCC_LSEConfig+0x3c>)
 8000db0:	2205      	movs	r2, #5
 8000db2:	701a      	strb	r2, [r3, #0]
      break;            
 8000db4:	bf00      	nop
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021020 	.word	0x40021020

08000dc4 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <RCC_LSICmd+0x1c>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	42420480 	.word	0x42420480

08000de4 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000dec:	4905      	ldr	r1, [pc, #20]	; (8000e04 <RCC_RTCCLKConfig+0x20>)
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <RCC_RTCCLKConfig+0x20>)
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	620b      	str	r3, [r1, #32]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <RCC_RTCCLKCmd+0x1c>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	4242043c 	.word	0x4242043c

08000e28 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000e40:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d007      	beq.n	8000e60 <RCC_GetClocksFreq+0x38>
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d009      	beq.n	8000e68 <RCC_GetClocksFreq+0x40>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d133      	bne.n	8000ec0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a47      	ldr	r2, [pc, #284]	; (8000f78 <RCC_GetClocksFreq+0x150>)
 8000e5c:	601a      	str	r2, [r3, #0]
      break;
 8000e5e:	e033      	b.n	8000ec8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <RCC_GetClocksFreq+0x150>)
 8000e64:	601a      	str	r2, [r3, #0]
      break;
 8000e66:	e02f      	b.n	8000ec8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e70:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	3302      	adds	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d106      	bne.n	8000e98 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4a3b      	ldr	r2, [pc, #236]	; (8000f7c <RCC_GetClocksFreq+0x154>)
 8000e8e:	fb02 f203 	mul.w	r2, r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000e96:	e017      	b.n	8000ec8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4a35      	ldr	r2, [pc, #212]	; (8000f7c <RCC_GetClocksFreq+0x154>)
 8000ea8:	fb02 f203 	mul.w	r2, r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
      break;
 8000eb0:	e00a      	b.n	8000ec8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <RCC_GetClocksFreq+0x150>)
 8000eb6:	fb02 f203 	mul.w	r2, r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
      break;
 8000ebe:	e003      	b.n	8000ec8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <RCC_GetClocksFreq+0x150>)
 8000ec4:	601a      	str	r2, [r3, #0]
      break;
 8000ec6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000ed8:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <RCC_GetClocksFreq+0x158>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ef8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000f00:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <RCC_GetClocksFreq+0x158>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	40da      	lsrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f20:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	0adb      	lsrs	r3, r3, #11
 8000f26:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <RCC_GetClocksFreq+0x158>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	40da      	lsrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <RCC_GetClocksFreq+0x14c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	0b9b      	lsrs	r3, r3, #14
 8000f4e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <RCC_GetClocksFreq+0x15c>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	611a      	str	r2, [r3, #16]
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	007a1200 	.word	0x007a1200
 8000f7c:	003d0900 	.word	0x003d0900
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000010 	.word	0x20000010

08000f88 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f9a:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <RCC_AHBPeriphClockCmd+0x38>)
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <RCC_AHBPeriphClockCmd+0x38>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000fa6:	e006      	b.n	8000fb6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000fa8:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <RCC_AHBPeriphClockCmd+0x38>)
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <RCC_AHBPeriphClockCmd+0x38>)
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	614b      	str	r3, [r1, #20]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fd6:	4909      	ldr	r1, [pc, #36]	; (8000ffc <RCC_APB2PeriphClockCmd+0x38>)
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <RCC_APB2PeriphClockCmd+0x38>)
 8000fda:	699a      	ldr	r2, [r3, #24]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fe2:	e006      	b.n	8000ff2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <RCC_APB2PeriphClockCmd+0x38>)
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <RCC_APB2PeriphClockCmd+0x38>)
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	618b      	str	r3, [r1, #24]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000

08001000 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <RCC_APB1PeriphClockCmd+0x38>)
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <RCC_APB1PeriphClockCmd+0x38>)
 8001016:	69da      	ldr	r2, [r3, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4313      	orrs	r3, r2
 800101c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800101e:	e006      	b.n	800102e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001020:	4905      	ldr	r1, [pc, #20]	; (8001038 <RCC_APB1PeriphClockCmd+0x38>)
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <RCC_APB1PeriphClockCmd+0x38>)
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	43db      	mvns	r3, r3
 800102a:	4013      	ands	r3, r2
 800102c:	61cb      	str	r3, [r1, #28]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000

0800103c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <RCC_APB2PeriphResetCmd+0x38>)
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <RCC_APB2PeriphResetCmd+0x38>)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800105a:	e006      	b.n	800106a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800105c:	4905      	ldr	r1, [pc, #20]	; (8001074 <RCC_APB2PeriphResetCmd+0x38>)
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <RCC_APB2PeriphResetCmd+0x38>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	43db      	mvns	r3, r3
 8001066:	4013      	ands	r3, r2
 8001068:	60cb      	str	r3, [r1, #12]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000

08001078 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800108a:	4909      	ldr	r1, [pc, #36]	; (80010b0 <RCC_APB1PeriphResetCmd+0x38>)
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <RCC_APB1PeriphResetCmd+0x38>)
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4313      	orrs	r3, r2
 8001094:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001096:	e006      	b.n	80010a6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001098:	4905      	ldr	r1, [pc, #20]	; (80010b0 <RCC_APB1PeriphResetCmd+0x38>)
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <RCC_APB1PeriphResetCmd+0x38>)
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4013      	ands	r3, r2
 80010a4:	610b      	str	r3, [r1, #16]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000

080010b4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <RCC_BackupResetCmd+0x1c>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	42420440 	.word	0x42420440

080010d4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <RCC_ClockSecuritySystemCmd+0x1c>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	4242004c 	.word	0x4242004c

080010f4 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <RCC_MCOConfig+0x1c>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	7013      	strb	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021007 	.word	0x40021007

08001114 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d103      	bne.n	8001140 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <RCC_GetFlagStatus+0x70>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e009      	b.n	8001154 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d103      	bne.n	800114e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <RCC_GetFlagStatus+0x70>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e002      	b.n	8001154 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <RCC_GetFlagStatus+0x70>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800116c:	2301      	movs	r3, #1
 800116e:	74fb      	strb	r3, [r7, #19]
 8001170:	e001      	b.n	8001176 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8001176:	7cfb      	ldrb	r3, [r7, #19]
}
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <RCC_ClearFlag+0x18>)
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <RCC_ClearFlag+0x18>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001196:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000

080011a4 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <RCC_GetITStatus+0x30>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000

080011d8 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <RCC_ClearITPendingBit+0x1c>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	7013      	strb	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	4002100a 	.word	0x4002100a

080011f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011fc:	4a15      	ldr	r2, [pc, #84]	; (8001254 <SystemInit+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <SystemInit+0x5c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001208:	4912      	ldr	r1, [pc, #72]	; (8001254 <SystemInit+0x5c>)
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <SystemInit+0x5c>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <SystemInit+0x60>)
 8001210:	4013      	ands	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001214:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <SystemInit+0x5c>)
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <SystemInit+0x5c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <SystemInit+0x5c>)
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <SystemInit+0x5c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001230:	4a08      	ldr	r2, [pc, #32]	; (8001254 <SystemInit+0x5c>)
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <SystemInit+0x5c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800123a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SystemInit+0x5c>)
 800123e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001242:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001244:	f000 f878 	bl	8001338 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <SystemInit+0x64>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	f8ff0000 	.word	0xf8ff0000
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <SystemCoreClockUpdate+0xc4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d007      	beq.n	8001292 <SystemCoreClockUpdate+0x32>
 8001282:	2b08      	cmp	r3, #8
 8001284:	d009      	beq.n	800129a <SystemCoreClockUpdate+0x3a>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d133      	bne.n	80012f2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <SystemCoreClockUpdate+0xcc>)
 800128e:	601a      	str	r2, [r3, #0]
      break;
 8001290:	e033      	b.n	80012fa <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 8001294:	4a25      	ldr	r2, [pc, #148]	; (800132c <SystemCoreClockUpdate+0xcc>)
 8001296:	601a      	str	r2, [r3, #0]
      break;
 8001298:	e02f      	b.n	80012fa <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <SystemCoreClockUpdate+0xc4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012a2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <SystemCoreClockUpdate+0xc4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	0c9b      	lsrs	r3, r3, #18
 80012b2:	3302      	adds	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <SystemCoreClockUpdate+0xd0>)
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 80012c6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80012c8:	e017      	b.n	80012fa <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <SystemCoreClockUpdate+0xc4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <SystemCoreClockUpdate+0xd0>)
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 80012e0:	6013      	str	r3, [r2, #0]
      break;
 80012e2:	e00a      	b.n	80012fa <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <SystemCoreClockUpdate+0xcc>)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 80012ee:	6013      	str	r3, [r2, #0]
      break;
 80012f0:	e003      	b.n	80012fa <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <SystemCoreClockUpdate+0xcc>)
 80012f6:	601a      	str	r2, [r3, #0]
      break;
 80012f8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SystemCoreClockUpdate+0xc4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <SystemCoreClockUpdate+0xd4>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <SystemCoreClockUpdate+0xc8>)
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	20000014 	.word	0x20000014
 800132c:	007a1200 	.word	0x007a1200
 8001330:	003d0900 	.word	0x003d0900
 8001334:	20000018 	.word	0x20000018

08001338 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800133c:	f000 f802 	bl	8001344 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001352:	4a3a      	ldr	r2, [pc, #232]	; (800143c <SetSysClockTo72+0xf8>)
 8001354:	4b39      	ldr	r3, [pc, #228]	; (800143c <SetSysClockTo72+0xf8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <SetSysClockTo72+0xf8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <SetSysClockTo72+0x38>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800137a:	d1f0      	bne.n	800135e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <SetSysClockTo72+0xf8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001388:	2301      	movs	r3, #1
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	e001      	b.n	8001392 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d14b      	bne.n	8001430 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <SetSysClockTo72+0xfc>)
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <SetSysClockTo72+0xfc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <SetSysClockTo72+0xfc>)
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <SetSysClockTo72+0xfc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <SetSysClockTo72+0xfc>)
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <SetSysClockTo72+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <SetSysClockTo72+0xf8>)
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <SetSysClockTo72+0xf8>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <SetSysClockTo72+0xf8>)
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <SetSysClockTo72+0xf8>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <SetSysClockTo72+0xf8>)
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <SetSysClockTo72+0xf8>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <SetSysClockTo72+0xf8>)
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <SetSysClockTo72+0xf8>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80013e2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <SetSysClockTo72+0xf8>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <SetSysClockTo72+0xf8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80013ee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <SetSysClockTo72+0xf8>)
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <SetSysClockTo72+0xf8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80013fc:	bf00      	nop
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <SetSysClockTo72+0xf8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f9      	beq.n	80013fe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <SetSysClockTo72+0xf8>)
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <SetSysClockTo72+0xf8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 0303 	bic.w	r3, r3, #3
 8001414:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <SetSysClockTo72+0xf8>)
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <SetSysClockTo72+0xf8>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001422:	bf00      	nop
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SetSysClockTo72+0xf8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d1f9      	bne.n	8001424 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40022000 	.word	0x40022000

08001444 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af04      	add	r7, sp, #16
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	4613      	mov	r3, r2
 8001452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 ff41 	bl	80032e0 <pvPortMalloc>
 800145e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001466:	205c      	movs	r0, #92	; 0x5c
 8001468:	f001 ff3a 	bl	80032e0 <pvPortMalloc>
 800146c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
 800147a:	e005      	b.n	8001488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800147c:	6978      	ldr	r0, [r7, #20]
 800147e:	f001 ffc3 	bl	8003408 <vPortFree>
 8001482:	e001      	b.n	8001488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	2300      	movs	r3, #0
 8001492:	9303      	str	r3, [sp, #12]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f80e 	bl	80014c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014aa:	69f8      	ldr	r0, [r7, #28]
 80014ac:	f000 f882 	bl	80015b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	e002      	b.n	80014bc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014bc:	69bb      	ldr	r3, [r7, #24]
	}
 80014be:	4618      	mov	r0, r3
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	461a      	mov	r2, r3
 80014de:	21a5      	movs	r1, #165	; 0xa5
 80014e0:	f002 f973 	bl	80037ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014ee:	3b01      	subs	r3, #1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f023 0307 	bic.w	r3, r3, #7
 80014fc:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e012      	b.n	800152a <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	4413      	add	r3, r2
 800150a:	7819      	ldrb	r1, [r3, #0]
 800150c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	4413      	add	r3, r2
 8001512:	3334      	adds	r3, #52	; 0x34
 8001514:	460a      	mov	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d9e9      	bls.n	8001504 <prvInitialiseNewTask+0x3e>
 8001530:	e000      	b.n	8001534 <prvInitialiseNewTask+0x6e>
		{
			break;
 8001532:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d901      	bls.n	8001546 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	2200      	movs	r2, #0
 8001556:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	3304      	adds	r3, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f002 f880 	bl	8003662 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	3318      	adds	r3, #24
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f87b 	bl	8003662 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001570:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f1c3 0205 	rsb	r2, r3, #5
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	2200      	movs	r2, #0
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	6938      	ldr	r0, [r7, #16]
 8001596:	f001 fd93 	bl	80030c0 <pxPortInitialiseStack>
 800159a:	4602      	mov	r2, r0
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80015ac:	bf00      	nop
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80015bc:	f001 fe06 	bl	80031cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <prvAddNewTaskToReadyList+0xc0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <prvAddNewTaskToReadyList+0xc0>)
 80015c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <prvAddNewTaskToReadyList+0xc4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80015d2:	4a29      	ldr	r2, [pc, #164]	; (8001678 <prvAddNewTaskToReadyList+0xc4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <prvAddNewTaskToReadyList+0xc0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d110      	bne.n	8001602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80015e0:	f001 f80e 	bl	8002600 <prvInitialiseTaskLists>
 80015e4:	e00d      	b.n	8001602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <prvAddNewTaskToReadyList+0xc8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <prvAddNewTaskToReadyList+0xc4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d802      	bhi.n	8001602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <prvAddNewTaskToReadyList+0xc4>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <prvAddNewTaskToReadyList+0xcc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <prvAddNewTaskToReadyList+0xcc>)
 800160a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <prvAddNewTaskToReadyList+0xcc>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2201      	movs	r2, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <prvAddNewTaskToReadyList+0xd0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <prvAddNewTaskToReadyList+0xd0>)
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <prvAddNewTaskToReadyList+0xd4>)
 8001634:	441a      	add	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f002 f81c 	bl	800367a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001642:	f001 fddb 	bl	80031fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <prvAddNewTaskToReadyList+0xc8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <prvAddNewTaskToReadyList+0xc4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <prvAddNewTaskToReadyList+0xd8>)
 800165e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f3bf 8f4f 	dsb	sy
 8001668:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000120 	.word	0x20000120
 8001678:	20000048 	.word	0x20000048
 800167c:	2000012c 	.word	0x2000012c
 8001680:	2000013c 	.word	0x2000013c
 8001684:	20000128 	.word	0x20000128
 8001688:	2000004c 	.word	0x2000004c
 800168c:	e000ed04 	.word	0xe000ed04

08001690 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001698:	f001 fd98 	bl	80031cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <vTaskDelete+0x18>
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <vTaskDelete+0xd8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	e000      	b.n	80016aa <vTaskDelete+0x1a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3304      	adds	r3, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f83d 	bl	8003730 <uxListRemove>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d115      	bne.n	80016e8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	492a      	ldr	r1, [pc, #168]	; (800176c <vTaskDelete+0xdc>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10a      	bne.n	80016e8 <vTaskDelete+0x58>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	2201      	movs	r2, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <vTaskDelete+0xe0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4013      	ands	r3, r2
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <vTaskDelete+0xe0>)
 80016e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3318      	adds	r3, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f81b 	bl	8003730 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <vTaskDelete+0xe4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <vTaskDelete+0xe4>)
 8001702:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <vTaskDelete+0xd8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d10b      	bne.n	8001726 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4818      	ldr	r0, [pc, #96]	; (8001778 <vTaskDelete+0xe8>)
 8001716:	f001 ffb0 	bl	800367a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <vTaskDelete+0xec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a16      	ldr	r2, [pc, #88]	; (800177c <vTaskDelete+0xec>)
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e009      	b.n	800173a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <vTaskDelete+0xf0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3b01      	subs	r3, #1
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <vTaskDelete+0xf0>)
 800172e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f001 f8ac 	bl	800288e <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001736:	f001 f8ba 	bl	80028ae <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800173a:	f001 fd5f 	bl	80031fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <vTaskDelete+0xf4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <vTaskDelete+0xd8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <vTaskDelete+0xf8>)
 8001752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f3bf 8f4f 	dsb	sy
 800175c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000048 	.word	0x20000048
 800176c:	2000004c 	.word	0x2000004c
 8001770:	20000128 	.word	0x20000128
 8001774:	2000013c 	.word	0x2000013c
 8001778:	200000f4 	.word	0x200000f4
 800177c:	20000108 	.word	0x20000108
 8001780:	20000120 	.word	0x20000120
 8001784:	2000012c 	.word	0x2000012c
 8001788:	e000ed04 	.word	0xe000ed04

0800178c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 800179a:	f000 fb3d 	bl	8001e18 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <vTaskDelayUntil+0x98>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90b      	bls.n	80017d0 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d911      	bls.n	80017e6 <vTaskDelayUntil+0x5a>
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90d      	bls.n	80017e6 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e00a      	b.n	80017e6 <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d803      	bhi.n	80017e2 <vTaskDelayUntil+0x56>
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d901      	bls.n	80017e6 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <vTaskDelayUntil+0x74>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fbf8 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001800:	f000 fb18 	bl	8001e34 <xTaskResumeAll>
 8001804:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <vTaskDelayUntil+0x9c>)
 800180e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000124 	.word	0x20000124
 8001828:	e000ed04 	.word	0xe000ed04

0800182c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800183e:	f000 faeb 	bl	8001e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 fbd3 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800184a:	f000 faf3 	bl	8001e34 <xTaskResumeAll>
 800184e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <vTaskDelay+0x44>)
 8001858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f3bf 8f4f 	dsb	sy
 8001862:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000ed04 	.word	0xe000ed04

08001874 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <eTaskGetState+0x84>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d102      	bne.n	8001890 <eTaskGetState+0x1c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
 800188e:	e02d      	b.n	80018ec <eTaskGetState+0x78>
		}
		else
		{
			taskENTER_CRITICAL();
 8001890:	f001 fc9c 	bl	80031cc <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800189a:	f001 fcaf 	bl	80031fc <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <eTaskGetState+0x88>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d004      	beq.n	80018b2 <eTaskGetState+0x3e>
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <eTaskGetState+0x8c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d102      	bne.n	80018b8 <eTaskGetState+0x44>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80018b2:	2302      	movs	r3, #2
 80018b4:	75fb      	strb	r3, [r7, #23]
 80018b6:	e019      	b.n	80018ec <eTaskGetState+0x78>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <eTaskGetState+0x90>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d109      	bne.n	80018d4 <eTaskGetState+0x60>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <eTaskGetState+0x5a>
					{
						eReturn = eSuspended;
 80018c8:	2303      	movs	r3, #3
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	e00e      	b.n	80018ec <eTaskGetState+0x78>
					}
					else
					{
						eReturn = eBlocked;
 80018ce:	2302      	movs	r3, #2
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e00b      	b.n	80018ec <eTaskGetState+0x78>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <eTaskGetState+0x94>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d002      	beq.n	80018e2 <eTaskGetState+0x6e>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <eTaskGetState+0x74>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80018e2:	2304      	movs	r3, #4
 80018e4:	75fb      	strb	r3, [r7, #23]
 80018e6:	e001      	b.n	80018ec <eTaskGetState+0x78>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80018e8:	2301      	movs	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000048 	.word	0x20000048
 80018fc:	200000d8 	.word	0x200000d8
 8001900:	200000dc 	.word	0x200000dc
 8001904:	2000010c 	.word	0x2000010c
 8001908:	200000f4 	.word	0x200000f4

0800190c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8001914:	f001 fc5a 	bl	80031cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <uxTaskPriorityGet+0x18>
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <uxTaskPriorityGet+0x30>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e000      	b.n	8001926 <uxTaskPriorityGet+0x1a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800192e:	f001 fc65 	bl	80031fc <vPortExitCritical>

		return uxReturn;
 8001932:	68bb      	ldr	r3, [r7, #8]
	}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000048 	.word	0x20000048

08001940 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001948:	f3ef 8211 	mrs	r2, BASEPRI
 800194c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	613a      	str	r2, [r7, #16]
 800195e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001960:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8001962:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <uxTaskPriorityGetFromISR+0x30>
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <uxTaskPriorityGetFromISR+0x50>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e000      	b.n	8001972 <uxTaskPriorityGetFromISR+0x32>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8001984:	697b      	ldr	r3, [r7, #20]
	}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000048 	.word	0x20000048

08001994 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d901      	bls.n	80019ac <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019a8:	2304      	movs	r3, #4
 80019aa:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80019ac:	f001 fc0e 	bl	80031cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <vTaskPrioritySet+0x28>
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <vTaskPrioritySet+0x130>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e000      	b.n	80019be <vTaskPrioritySet+0x2a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d074      	beq.n	8001ab8 <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d90d      	bls.n	80019f2 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <vTaskPrioritySet+0x130>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d00f      	beq.n	8001a00 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <vTaskPrioritySet+0x130>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d809      	bhi.n	8001a00 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e006      	b.n	8001a00 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <vTaskPrioritySet+0x130>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d101      	bne.n	8001a00 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d102      	bne.n	8001a18 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db04      	blt.n	8001a30 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f1c3 0205 	rsb	r2, r3, #5
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6959      	ldr	r1, [r3, #20]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <vTaskPrioritySet+0x134>)
 8001a40:	4413      	add	r3, r2
 8001a42:	4299      	cmp	r1, r3
 8001a44:	d101      	bne.n	8001a4a <vTaskPrioritySet+0xb6>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <vTaskPrioritySet+0xb8>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d028      	beq.n	8001aa2 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fe6b 	bl	8003730 <uxListRemove>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001a60:	2201      	movs	r2, #1
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <vTaskPrioritySet+0x138>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <vTaskPrioritySet+0x138>)
 8001a72:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2201      	movs	r2, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <vTaskPrioritySet+0x138>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <vTaskPrioritySet+0x138>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <vTaskPrioritySet+0x134>)
 8001a94:	441a      	add	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f001 fdec 	bl	800367a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <vTaskPrioritySet+0x13c>)
 8001aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001ab8:	f001 fba0 	bl	80031fc <vPortExitCritical>
	}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000048 	.word	0x20000048
 8001ac8:	2000004c 	.word	0x2000004c
 8001acc:	20000128 	.word	0x20000128
 8001ad0:	e000ed04 	.word	0xe000ed04

08001ad4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001adc:	f001 fb76 	bl	80031cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <vTaskSuspend+0x18>
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <vTaskSuspend+0xd4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e000      	b.n	8001aee <vTaskSuspend+0x1a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fe1b 	bl	8003730 <uxListRemove>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d115      	bne.n	8001b2c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	4929      	ldr	r1, [pc, #164]	; (8001bac <vTaskSuspend+0xd8>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10a      	bne.n	8001b2c <vTaskSuspend+0x58>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43da      	mvns	r2, r3
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <vTaskSuspend+0xdc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4013      	ands	r3, r2
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <vTaskSuspend+0xdc>)
 8001b2a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3318      	adds	r3, #24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fdf9 	bl	8003730 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <vTaskSuspend+0xe0>)
 8001b46:	f001 fd98 	bl	800367a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001b4a:	f001 fb57 	bl	80031fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <vTaskSuspend+0xe4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001b56:	f001 fb39 	bl	80031cc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001b5a:	f000 fea8 	bl	80028ae <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001b5e:	f001 fb4d 	bl	80031fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <vTaskSuspend+0xd4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d118      	bne.n	8001b9e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <vTaskSuspend+0xe4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <vTaskSuspend+0xe8>)
 8001b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b84:	e00b      	b.n	8001b9e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <vTaskSuspend+0xe0>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <vTaskSuspend+0xec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d103      	bne.n	8001b9a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <vTaskSuspend+0xd4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
	}
 8001b98:	e001      	b.n	8001b9e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8001b9a:	f000 fb51 	bl	8002240 <vTaskSwitchContext>
	}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000048 	.word	0x20000048
 8001bac:	2000004c 	.word	0x2000004c
 8001bb0:	20000128 	.word	0x20000128
 8001bb4:	2000010c 	.word	0x2000010c
 8001bb8:	2000012c 	.word	0x2000012c
 8001bbc:	e000ed04 	.word	0xe000ed04
 8001bc0:	20000120 	.word	0x20000120

08001bc4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <prvTaskIsTaskSuspended+0x50>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <prvTaskIsTaskSuspended+0x1e>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <prvTaskIsTaskSuspended+0x20>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00f      	beq.n	8001c08 <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <prvTaskIsTaskSuspended+0x54>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <prvTaskIsTaskSuspended+0x3a>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <prvTaskIsTaskSuspended+0x3c>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001c08:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	2000010c 	.word	0x2000010c
 8001c18:	200000e0 	.word	0x200000e0

08001c1c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d039      	beq.n	8001ca2 <vTaskResume+0x86>
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <vTaskResume+0x90>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d034      	beq.n	8001ca2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8001c38:	f001 fac8 	bl	80031cc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff ffc1 	bl	8001bc4 <prvTaskIsTaskSuspended>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02a      	beq.n	8001c9e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 fd6f 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	2201      	movs	r2, #1
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <vTaskResume+0x94>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <vTaskResume+0x94>)
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <vTaskResume+0x98>)
 8001c72:	441a      	add	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f001 fcfd 	bl	800367a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <vTaskResume+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d307      	bcc.n	8001c9e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <vTaskResume+0x9c>)
 8001c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001c9e:	f001 faad 	bl	80031fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000048 	.word	0x20000048
 8001cb0:	20000128 	.word	0x20000128
 8001cb4:	2000004c 	.word	0x2000004c
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
	__asm volatile
 8001ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8001cd0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	613a      	str	r2, [r7, #16]
 8001ce2:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8001ce4:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ce6:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001ce8:	69b8      	ldr	r0, [r7, #24]
 8001cea:	f7ff ff6b 	bl	8001bc4 <prvTaskIsTaskSuspended>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d02f      	beq.n	8001d54 <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <xTaskResumeFromISR+0xac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d125      	bne.n	8001d48 <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <xTaskResumeFromISR+0xb0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d301      	bcc.n	8001d0e <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3304      	adds	r3, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 fd0c 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <xTaskResumeFromISR+0xb4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <xTaskResumeFromISR+0xb4>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <xTaskResumeFromISR+0xb8>)
 8001d38:	441a      	add	r2, r3
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f001 fc9a 	bl	800367a <vListInsertEnd>
 8001d46:	e005      	b.n	8001d54 <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <xTaskResumeFromISR+0xbc>)
 8001d50:	f001 fc93 	bl	800367a <vListInsertEnd>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
	}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000148 	.word	0x20000148
 8001d6c:	20000048 	.word	0x20000048
 8001d70:	20000128 	.word	0x20000128
 8001d74:	2000004c 	.word	0x2000004c
 8001d78:	200000e0 	.word	0x200000e0

08001d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <vTaskStartScheduler+0x54>)
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2278      	movs	r2, #120	; 0x78
 8001d8e:	4911      	ldr	r1, [pc, #68]	; (8001dd4 <vTaskStartScheduler+0x58>)
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <vTaskStartScheduler+0x5c>)
 8001d92:	f7ff fb57 	bl	8001444 <xTaskCreate>
 8001d96:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d114      	bne.n	8001dc8 <vTaskStartScheduler+0x4c>
	__asm volatile
 8001d9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <vTaskStartScheduler+0x60>)
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <vTaskStartScheduler+0x64>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <vTaskStartScheduler+0x68>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dc4:	f001 f9dd 	bl	8003182 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000144 	.word	0x20000144
 8001dd4:	080037f8 	.word	0x080037f8
 8001dd8:	080025d3 	.word	0x080025d3
 8001ddc:	20000140 	.word	0x20000140
 8001de0:	2000012c 	.word	0x2000012c
 8001de4:	20000124 	.word	0x20000124

08001de8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <vTaskEndScheduler+0x2c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8001e06:	f001 f9db 	bl	80031c0 <vPortEndScheduler>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000012c 	.word	0x2000012c

08001e18 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <vTaskSuspendAll+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <vTaskSuspendAll+0x18>)
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000148 	.word	0x20000148

08001e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e42:	f001 f9c3 	bl	80031cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <xTaskResumeAll+0xf8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <xTaskResumeAll+0xf8>)
 8001e4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <xTaskResumeAll+0xf8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d161      	bne.n	8001f1c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <xTaskResumeAll+0xfc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05d      	beq.n	8001f1c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e60:	e02e      	b.n	8001ec0 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <xTaskResumeAll+0x100>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fc5e 	bl	8003730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fc59 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <xTaskResumeAll+0x104>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <xTaskResumeAll+0x104>)
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <xTaskResumeAll+0x108>)
 8001e9e:	441a      	add	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f001 fbe7 	bl	800367a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <xTaskResumeAll+0x10c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <xTaskResumeAll+0x110>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <xTaskResumeAll+0x100>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1cc      	bne.n	8001e62 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ece:	f000 fcee 	bl	80028ae <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <xTaskResumeAll+0x114>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ede:	f000 f903 	bl	80020e8 <xTaskIncrementTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <xTaskResumeAll+0x110>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f1      	bne.n	8001ede <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <xTaskResumeAll+0x114>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <xTaskResumeAll+0x110>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <xTaskResumeAll+0x118>)
 8001f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f1c:	f001 f96e 	bl	80031fc <vPortExitCritical>

	return xAlreadyYielded;
 8001f20:	68bb      	ldr	r3, [r7, #8]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000148 	.word	0x20000148
 8001f30:	20000120 	.word	0x20000120
 8001f34:	200000e0 	.word	0x200000e0
 8001f38:	20000128 	.word	0x20000128
 8001f3c:	2000004c 	.word	0x2000004c
 8001f40:	20000048 	.word	0x20000048
 8001f44:	20000134 	.word	0x20000134
 8001f48:	20000130 	.word	0x20000130
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <xTaskGetTickCount+0x18>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	20000124 	.word	0x20000124

08001f6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <xTaskGetTickCountFromISR+0x1c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001f7c:	683b      	ldr	r3, [r7, #0]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20000124 	.word	0x20000124

08001f8c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <uxTaskGetNumberOfTasks+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000120 	.word	0x20000120

08001fa0 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <pcTaskGetName+0x14>
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <pcTaskGetName+0x28>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e000      	b.n	8001fb6 <pcTaskGetName+0x16>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3334      	adds	r3, #52	; 0x34
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000048 	.word	0x20000048

08001fcc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	2305      	movs	r3, #5
 8001fde:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8001fe0:	f7ff ff1a 	bl	8001e18 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <uxTaskGetSystemState+0x104>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d368      	bcc.n	80020c0 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1898      	adds	r0, r3, r2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <uxTaskGetSystemState+0x108>)
 8002010:	4413      	add	r3, r2
 8002012:	2201      	movs	r2, #1
 8002014:	4619      	mov	r1, r3
 8002016:	f000 fbcd 	bl	80027b4 <prvListTasksWithinSingleList>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4413      	add	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e2      	bne.n	8001fee <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1898      	adds	r0, r3, r2
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <uxTaskGetSystemState+0x10c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2202      	movs	r2, #2
 800203e:	4619      	mov	r1, r3
 8002040:	f000 fbb8 	bl	80027b4 <prvListTasksWithinSingleList>
 8002044:	4602      	mov	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1898      	adds	r0, r3, r2
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <uxTaskGetSystemState+0x110>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2202      	movs	r2, #2
 8002062:	4619      	mov	r1, r3
 8002064:	f000 fba6 	bl	80027b4 <prvListTasksWithinSingleList>
 8002068:	4602      	mov	r2, r0
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	2204      	movs	r2, #4
 8002082:	4917      	ldr	r1, [pc, #92]	; (80020e0 <uxTaskGetSystemState+0x114>)
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fb95 	bl	80027b4 <prvListTasksWithinSingleList>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	2203      	movs	r2, #3
 80020a4:	490f      	ldr	r1, [pc, #60]	; (80020e4 <uxTaskGetSystemState+0x118>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb84 	bl	80027b4 <prvListTasksWithinSingleList>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80020c0:	f7ff feb8 	bl	8001e34 <xTaskResumeAll>

		return uxTask;
 80020c4:	697b      	ldr	r3, [r7, #20]
	}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000120 	.word	0x20000120
 80020d4:	2000004c 	.word	0x2000004c
 80020d8:	200000d8 	.word	0x200000d8
 80020dc:	200000dc 	.word	0x200000dc
 80020e0:	200000f4 	.word	0x200000f4
 80020e4:	2000010c 	.word	0x2000010c

080020e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <xTaskIncrementTick+0x12c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d17c      	bne.n	80021f4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <xTaskIncrementTick+0x130>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002102:	4a45      	ldr	r2, [pc, #276]	; (8002218 <xTaskIncrementTick+0x130>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d110      	bne.n	8002130 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <xTaskIncrementTick+0x134>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <xTaskIncrementTick+0x138>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a40      	ldr	r2, [pc, #256]	; (800221c <xTaskIncrementTick+0x134>)
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <xTaskIncrementTick+0x138>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b40      	ldr	r3, [pc, #256]	; (8002224 <xTaskIncrementTick+0x13c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a3e      	ldr	r2, [pc, #248]	; (8002224 <xTaskIncrementTick+0x13c>)
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	f000 fbbf 	bl	80028ae <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <xTaskIncrementTick+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d34d      	bcc.n	80021d6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800213a:	4b38      	ldr	r3, [pc, #224]	; (800221c <xTaskIncrementTick+0x134>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <xTaskIncrementTick+0x60>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <xTaskIncrementTick+0x62>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <xTaskIncrementTick+0x140>)
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	601a      	str	r2, [r3, #0]
					break;
 8002156:	e03e      	b.n	80021d6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <xTaskIncrementTick+0x134>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d203      	bcs.n	8002178 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002170:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <xTaskIncrementTick+0x140>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
						break;
 8002176:	e02e      	b.n	80021d6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3304      	adds	r3, #4
 800217c:	4618      	mov	r0, r3
 800217e:	f001 fad7 	bl	8003730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3318      	adds	r3, #24
 800218e:	4618      	mov	r0, r3
 8002190:	f001 face 	bl	8003730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <xTaskIncrementTick+0x144>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <xTaskIncrementTick+0x144>)
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <xTaskIncrementTick+0x148>)
 80021b4:	441a      	add	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3304      	adds	r3, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f001 fa5c 	bl	800367a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <xTaskIncrementTick+0x14c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3b4      	bcc.n	800213a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021d4:	e7b1      	b.n	800213a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <xTaskIncrementTick+0x14c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	4914      	ldr	r1, [pc, #80]	; (8002230 <xTaskIncrementTick+0x148>)
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d907      	bls.n	80021fe <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e004      	b.n	80021fe <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <xTaskIncrementTick+0x150>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <xTaskIncrementTick+0x150>)
 80021fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <xTaskIncrementTick+0x154>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8002206:	2301      	movs	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800220a:	697b      	ldr	r3, [r7, #20]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000148 	.word	0x20000148
 8002218:	20000124 	.word	0x20000124
 800221c:	200000d8 	.word	0x200000d8
 8002220:	200000dc 	.word	0x200000dc
 8002224:	20000138 	.word	0x20000138
 8002228:	20000140 	.word	0x20000140
 800222c:	20000128 	.word	0x20000128
 8002230:	2000004c 	.word	0x2000004c
 8002234:	20000048 	.word	0x20000048
 8002238:	20000130 	.word	0x20000130
 800223c:	20000134 	.word	0x20000134

08002240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <vTaskSwitchContext+0xc4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <vTaskSwitchContext+0xc8>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002254:	e051      	b.n	80022fa <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <vTaskSwitchContext+0xc8>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <vTaskSwitchContext+0xcc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d111      	bne.n	8002298 <vTaskSwitchContext+0x58>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3304      	adds	r3, #4
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10b      	bne.n	8002298 <vTaskSwitchContext+0x58>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3308      	adds	r3, #8
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d105      	bne.n	8002298 <vTaskSwitchContext+0x58>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	330c      	adds	r3, #12
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d008      	beq.n	80022aa <vTaskSwitchContext+0x6a>
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <vTaskSwitchContext+0xcc>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <vTaskSwitchContext+0xcc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3334      	adds	r3, #52	; 0x34
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7fd ff83 	bl	80001b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <vTaskSwitchContext+0xd0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f1c3 031f 	rsb	r3, r3, #31
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <vTaskSwitchContext+0xd4>)
 80022cc:	4413      	add	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3308      	adds	r3, #8
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d104      	bne.n	80022f0 <vTaskSwitchContext+0xb0>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <vTaskSwitchContext+0xcc>)
 80022f8:	6013      	str	r3, [r2, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000148 	.word	0x20000148
 8002308:	20000134 	.word	0x20000134
 800230c:	20000048 	.word	0x20000048
 8002310:	20000128 	.word	0x20000128
 8002314:	2000004c 	.word	0x2000004c

08002318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <vTaskPlaceOnEventList+0x28>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3318      	adds	r3, #24
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f001 f9c8 	bl	80036c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002330:	2101      	movs	r1, #1
 8002332:	6838      	ldr	r0, [r7, #0]
 8002334:	f000 fe5c 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000048 	.word	0x20000048

08002344 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <vTaskPlaceOnUnorderedEventList+0x38>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800235a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <vTaskPlaceOnUnorderedEventList+0x38>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3318      	adds	r3, #24
 8002362:	4619      	mov	r1, r3
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f001 f988 	bl	800367a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800236a:	2101      	movs	r1, #1
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fe3f 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000048 	.word	0x20000048

08002380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3318      	adds	r3, #24
 8002394:	4618      	mov	r0, r3
 8002396:	f001 f9cb 	bl	8003730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <xTaskRemoveFromEventList+0x90>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11c      	bne.n	80023dc <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f9c2 	bl	8003730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	2201      	movs	r2, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <xTaskRemoveFromEventList+0x94>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <xTaskRemoveFromEventList+0x94>)
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <xTaskRemoveFromEventList+0x98>)
 80023cc:	441a      	add	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f001 f950 	bl	800367a <vListInsertEnd>
 80023da:	e005      	b.n	80023e8 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3318      	adds	r3, #24
 80023e0:	4619      	mov	r1, r3
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <xTaskRemoveFromEventList+0x9c>)
 80023e4:	f001 f949 	bl	800367a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <xTaskRemoveFromEventList+0xa0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d905      	bls.n	8002402 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <xTaskRemoveFromEventList+0xa4>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e001      	b.n	8002406 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000148 	.word	0x20000148
 8002414:	20000128 	.word	0x20000128
 8002418:	2000004c 	.word	0x2000004c
 800241c:	200000e0 	.word	0x200000e0
 8002420:	20000048 	.word	0x20000048
 8002424:	20000134 	.word	0x20000134

08002428 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f001 f974 	bl	8003730 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3304      	adds	r3, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f001 f96f 	bl	8003730 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	2201      	movs	r2, #1
 8002458:	409a      	lsls	r2, r3
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <xTaskRemoveFromUnorderedEventList+0x80>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <xTaskRemoveFromUnorderedEventList+0x80>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <xTaskRemoveFromUnorderedEventList+0x84>)
 8002472:	441a      	add	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f001 f8fd 	bl	800367a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <xTaskRemoveFromUnorderedEventList+0x88>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	429a      	cmp	r2, r3
 800248c:	d905      	bls.n	800249a <xTaskRemoveFromUnorderedEventList+0x72>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 800248e:	2301      	movs	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <xTaskRemoveFromUnorderedEventList+0x8c>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e001      	b.n	800249e <xTaskRemoveFromUnorderedEventList+0x76>
	}
	else
	{
		xReturn = pdFALSE;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000128 	.word	0x20000128
 80024ac:	2000004c 	.word	0x2000004c
 80024b0:	20000048 	.word	0x20000048
 80024b4:	20000134 	.word	0x20000134

080024b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <vTaskSetTimeOutState+0x24>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <vTaskSetTimeOutState+0x28>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000138 	.word	0x20000138
 80024e0:	20000124 	.word	0x20000124

080024e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80024ee:	f000 fe6d 	bl	80031cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <xTaskCheckForTimeOut+0x80>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002500:	d102      	bne.n	8002508 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e026      	b.n	8002556 <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <xTaskCheckForTimeOut+0x84>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d007      	beq.n	8002524 <xTaskCheckForTimeOut+0x40>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	d802      	bhi.n	8002524 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800251e:	2301      	movs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e018      	b.n	8002556 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d20e      	bcs.n	8002552 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	441a      	add	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffb6 	bl	80024b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e001      	b.n	8002556 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8002552:	2301      	movs	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002556:	f000 fe51 	bl	80031fc <vPortExitCritical>

	return xReturn;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000124 	.word	0x20000124
 8002568:	20000138 	.word	0x20000138

0800256c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <vTaskMissedYield+0x14>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000134 	.word	0x20000134

08002584 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e001      	b.n	80025a2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 80025a2:	68fb      	ldr	r3, [r7, #12]
	}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80025da:	f000 f851 	bl	8002680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <prvIdleTask+0x26>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d9f9      	bls.n	80025da <prvIdleTask+0x8>
			{
				taskYIELD();
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <prvIdleTask+0x2a>)
 80025e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80025f6:	e7f0      	b.n	80025da <prvIdleTask+0x8>
 80025f8:	2000004c 	.word	0x2000004c
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	e00c      	b.n	8002626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <prvInitialiseTaskLists+0x60>)
 8002618:	4413      	add	r3, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 f802 	bl	8003624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d9ef      	bls.n	800260c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <prvInitialiseTaskLists+0x64>)
 800262e:	f000 fff9 	bl	8003624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <prvInitialiseTaskLists+0x68>)
 8002634:	f000 fff6 	bl	8003624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <prvInitialiseTaskLists+0x6c>)
 800263a:	f000 fff3 	bl	8003624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800263e:	480c      	ldr	r0, [pc, #48]	; (8002670 <prvInitialiseTaskLists+0x70>)
 8002640:	f000 fff0 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <prvInitialiseTaskLists+0x74>)
 8002646:	f000 ffed 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <prvInitialiseTaskLists+0x78>)
 800264c:	4a05      	ldr	r2, [pc, #20]	; (8002664 <prvInitialiseTaskLists+0x64>)
 800264e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <prvInitialiseTaskLists+0x7c>)
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <prvInitialiseTaskLists+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000004c 	.word	0x2000004c
 8002664:	200000b0 	.word	0x200000b0
 8002668:	200000c4 	.word	0x200000c4
 800266c:	200000e0 	.word	0x200000e0
 8002670:	200000f4 	.word	0x200000f4
 8002674:	2000010c 	.word	0x2000010c
 8002678:	200000d8 	.word	0x200000d8
 800267c:	200000dc 	.word	0x200000dc

08002680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002686:	e028      	b.n	80026da <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002688:	f7ff fbc6 	bl	8001e18 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <prvCheckTasksWaitingTermination+0x6c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800269c:	f7ff fbca 	bl	8001e34 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d119      	bne.n	80026da <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80026a6:	f000 fd91 	bl	80031cc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <prvCheckTasksWaitingTermination+0x6c>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 f83a 	bl	8003730 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <prvCheckTasksWaitingTermination+0x70>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <prvCheckTasksWaitingTermination+0x70>)
 80026c4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <prvCheckTasksWaitingTermination+0x74>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <prvCheckTasksWaitingTermination+0x74>)
 80026ce:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80026d0:	f000 fd94 	bl	80031fc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	f000 f8da 	bl	800288e <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <prvCheckTasksWaitingTermination+0x74>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1d2      	bne.n	8002688 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200000f4 	.word	0x200000f4
 80026f0:	20000120 	.word	0x20000120
 80026f4:	20000108 	.word	0x20000108

080026f8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <vTaskGetInfo+0x1a>
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <vTaskGetInfo+0xb8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	e000      	b.n	8002714 <vTaskGetInfo+0x1c>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d10a      	bne.n	800275c <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
 8002746:	f7ff fb67 	bl	8001e18 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2202      	movs	r2, #2
 8002756:	731a      	strb	r2, [r3, #12]
					}
				}
				xTaskResumeAll();
 8002758:	f7ff fb6c 	bl	8001e34 <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d003      	beq.n	8002778 <vTaskGetInfo+0x80>
		{
			pxTaskStatus->eCurrentState = eState;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	731a      	strb	r2, [r3, #12]
 8002776:	e006      	b.n	8002786 <vTaskGetInfo+0x8e>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff f87b 	bl	8001874 <eTaskGetState>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d009      	beq.n	80027a0 <vTaskGetInfo+0xa8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f861 	bl	8002858 <prvTaskCheckFreeStackSpace>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800279e:	e002      	b.n	80027a6 <vTaskGetInfo+0xae>
			pxTaskStatus->usStackHighWaterMark = 0;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	841a      	strh	r2, [r3, #32]
	}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000048 	.word	0x20000048

080027b4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03f      	beq.n	800284e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	3308      	adds	r3, #8
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d104      	bne.n	80027f2 <prvListTasksWithinSingleList+0x3e>
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	3308      	adds	r3, #8
 8002810:	429a      	cmp	r2, r3
 8002812:	d104      	bne.n	800281e <prvListTasksWithinSingleList+0x6a>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1899      	adds	r1, r3, r2
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2201      	movs	r2, #1
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff5c 	bl	80026f8 <vTaskGetInfo>
				uxTask++;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	3301      	adds	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	429a      	cmp	r2, r3
 800284c:	d1d5      	bne.n	80027fa <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8002850:	4618      	mov	r0, r3
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002864:	e005      	b.n	8002872 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3301      	adds	r3, #1
 800286a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3301      	adds	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2ba5      	cmp	r3, #165	; 0xa5
 8002878:	d0f5      	beq.n	8002866 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	b29b      	uxth	r3, r3
	}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fdb4 	bl	8003408 <vPortFree>
			vPortFree( pxTCB );
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fdb1 	bl	8003408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <prvResetNextTaskUnblockTime+0x42>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <prvResetNextTaskUnblockTime+0x14>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <prvResetNextTaskUnblockTime+0x16>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <prvResetNextTaskUnblockTime+0x46>)
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028d0:	e008      	b.n	80028e4 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <prvResetNextTaskUnblockTime+0x42>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <prvResetNextTaskUnblockTime+0x46>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200000d8 	.word	0x200000d8
 80028f4:	20000140 	.word	0x20000140

080028f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <xTaskGetCurrentTaskHandle+0x18>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002904:	687b      	ldr	r3, [r7, #4]
	}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000048 	.word	0x20000048

08002914 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d062      	beq.n	80029ec <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <vTaskPriorityInherit+0xe0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	429a      	cmp	r2, r3
 8002932:	d25b      	bcs.n	80029ec <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db06      	blt.n	800294a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <vTaskPriorityInherit+0xe0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f1c3 0205 	rsb	r2, r3, #5
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6959      	ldr	r1, [r3, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <vTaskPriorityInherit+0xe4>)
 800295c:	4413      	add	r3, r2
 800295e:	4299      	cmp	r1, r3
 8002960:	d101      	bne.n	8002966 <vTaskPriorityInherit+0x52>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <vTaskPriorityInherit+0x54>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03a      	beq.n	80029e2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fedd 	bl	8003730 <uxListRemove>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d115      	bne.n	80029a8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	491d      	ldr	r1, [pc, #116]	; (80029f8 <vTaskPriorityInherit+0xe4>)
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <vTaskPriorityInherit+0x94>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2201      	movs	r2, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <vTaskPriorityInherit+0xe8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <vTaskPriorityInherit+0xe8>)
 80029a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <vTaskPriorityInherit+0xe0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <vTaskPriorityInherit+0xe8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <vTaskPriorityInherit+0xe8>)
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <vTaskPriorityInherit+0xe4>)
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 fe4d 	bl	800367a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029e0:	e004      	b.n	80029ec <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <vTaskPriorityInherit+0xe0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000048 	.word	0x20000048
 80029f8:	2000004c 	.word	0x2000004c
 80029fc:	20000128 	.word	0x20000128

08002a00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d04f      	beq.n	8002ab6 <xTaskPriorityDisinherit+0xb6>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	1e5a      	subs	r2, r3, #1
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d044      	beq.n	8002ab6 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d140      	bne.n	8002ab6 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fe79 	bl	8003730 <uxListRemove>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d115      	bne.n	8002a70 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	491d      	ldr	r1, [pc, #116]	; (8002ac0 <xTaskPriorityDisinherit+0xc0>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xTaskPriorityDisinherit+0x70>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	2201      	movs	r2, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43da      	mvns	r2, r3
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <xTaskPriorityDisinherit+0xc4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <xTaskPriorityDisinherit+0xc4>)
 8002a6e:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f1c3 0205 	rsb	r2, r3, #5
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2201      	movs	r2, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <xTaskPriorityDisinherit+0xc4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <xTaskPriorityDisinherit+0xc4>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <xTaskPriorityDisinherit+0xc0>)
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f000 fde4 	bl	800367a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
	}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000004c 	.word	0x2000004c
 8002ac4:	20000128 	.word	0x20000128

08002ac8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <uxTaskResetEventItemValue+0x2c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <uxTaskResetEventItemValue+0x2c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <uxTaskResetEventItemValue+0x2c>)
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ae0:	f1c2 0205 	rsb	r2, r2, #5
 8002ae4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8002ae6:	687b      	ldr	r3, [r7, #4]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000048 	.word	0x20000048

08002af8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0a:	3201      	adds	r2, #1
 8002b0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002b0e:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8002b10:	681b      	ldr	r3, [r3, #0]
	}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000048 	.word	0x20000048

08002b20 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8002b2a:	f000 fb4f 	bl	80031cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b48:	2101      	movs	r1, #1
 8002b4a:	6838      	ldr	r0, [r7, #0]
 8002b4c:	f000 fa50 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <ulTaskNotifyTake+0x8c>)
 8002b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002b60:	f000 fb4c 	bl	80031fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8002b64:	f000 fb32 	bl	80031cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
 8002b84:	e004      	b.n	8002b90 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	3a01      	subs	r2, #1
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <ulTaskNotifyTake+0x88>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002b9a:	f000 fb2f 	bl	80031fc <vPortExitCritical>

		return ulReturn;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000048 	.word	0x20000048
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002bbe:	f000 fb05 	bl	80031cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d01a      	beq.n	8002c06 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	400a      	ands	r2, r1
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bee:	2101      	movs	r1, #1
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f000 f9fd 	bl	8002ff0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <xTaskNotifyWait+0xb0>)
 8002bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002c06:	f000 faf9 	bl	80031fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8002c0a:	f000 fadf 	bl	80031cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e008      	b.n	8002c44 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	43d2      	mvns	r2, r2
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <xTaskNotifyWait+0xac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002c4e:	f000 fad5 	bl	80031fc <vPortExitCritical>

		return xReturn;
 8002c52:	697b      	ldr	r3, [r7, #20]
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000048 	.word	0x20000048
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8002c7c:	f000 faa6 	bl	80031cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <xTaskGenericNotify+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c94:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d828      	bhi.n	8002cf6 <xTaskGenericNotify+0x92>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <xTaskGenericNotify+0x48>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cf7 	.word	0x08002cf7
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002ccf 	.word	0x08002ccf
 8002cb8:	08002cdb 	.word	0x08002cdb
 8002cbc:	08002ce3 	.word	0x08002ce3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002ccc:	e013      	b.n	8002cf6 <xTaskGenericNotify+0x92>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002cd8:	e00d      	b.n	8002cf6 <xTaskGenericNotify+0x92>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002ce0:	e009      	b.n	8002cf6 <xTaskGenericNotify+0x92>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d003      	beq.n	8002cf0 <xTaskGenericNotify+0x8c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002cee:	e001      	b.n	8002cf4 <xTaskGenericNotify+0x90>
						xReturn = pdFAIL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
					break;
 8002cf4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d12a      	bne.n	8002d52 <xTaskGenericNotify+0xee>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fd15 	bl	8003730 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <xTaskGenericNotify+0xfc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <xTaskGenericNotify+0xfc>)
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <xTaskGenericNotify+0x100>)
 8002d26:	441a      	add	r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f000 fca3 	bl	800367a <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <xTaskGenericNotify+0x104>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d907      	bls.n	8002d52 <xTaskGenericNotify+0xee>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <xTaskGenericNotify+0x108>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002d52:	f000 fa53 	bl	80031fc <vPortExitCritical>

		return xReturn;
 8002d56:	69fb      	ldr	r3, [r7, #28]
	}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000128 	.word	0x20000128
 8002d64:	2000004c 	.word	0x2000004c
 8002d68:	20000048 	.word	0x20000048
 8002d6c:	e000ed04 	.word	0xe000ed04

08002d70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 8002d88:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	61fa      	str	r2, [r7, #28]
 8002d9e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002da0:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
		{
			if( pulPreviousNotificationValue != NULL )
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d828      	bhi.n	8002e1c <xTaskGenericNotifyFromISR+0xac>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <xTaskGenericNotifyFromISR+0x60>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df3 	.word	0x08002df3
 8002ddc:	08002dff 	.word	0x08002dff
 8002de0:	08002e07 	.word	0x08002e07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002df0:	e014      	b.n	8002e1c <xTaskGenericNotifyFromISR+0xac>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002dfc:	e00e      	b.n	8002e1c <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002e04:	e00a      	b.n	8002e1c <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <xTaskGenericNotifyFromISR+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002e14:	e001      	b.n	8002e1a <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 8002e1a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d137      	bne.n	8002e94 <xTaskGenericNotifyFromISR+0x124>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <xTaskGenericNotifyFromISR+0x138>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11c      	bne.n	8002e66 <xTaskGenericNotifyFromISR+0xf6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fc7d 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <xTaskGenericNotifyFromISR+0x13c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <xTaskGenericNotifyFromISR+0x13c>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <xTaskGenericNotifyFromISR+0x140>)
 8002e56:	441a      	add	r2, r3
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 fc0b 	bl	800367a <vListInsertEnd>
 8002e64:	e005      	b.n	8002e72 <xTaskGenericNotifyFromISR+0x102>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	3318      	adds	r3, #24
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4811      	ldr	r0, [pc, #68]	; (8002eb4 <xTaskGenericNotifyFromISR+0x144>)
 8002e6e:	f000 fc04 	bl	800367a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <xTaskGenericNotifyFromISR+0x148>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d909      	bls.n	8002e94 <xTaskGenericNotifyFromISR+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <xTaskGenericNotifyFromISR+0x11e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e002      	b.n	8002e94 <xTaskGenericNotifyFromISR+0x124>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <xTaskGenericNotifyFromISR+0x14c>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3730      	adds	r7, #48	; 0x30
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000148 	.word	0x20000148
 8002eac:	20000128 	.word	0x20000128
 8002eb0:	2000004c 	.word	0x2000004c
 8002eb4:	200000e0 	.word	0x200000e0
 8002eb8:	20000048 	.word	0x20000048
 8002ebc:	20000134 	.word	0x20000134

08002ec0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	61fb      	str	r3, [r7, #28]
	__asm volatile
 8002ece:	f3ef 8211 	mrs	r2, BASEPRI
 8002ed2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	613a      	str	r2, [r7, #16]
 8002ee4:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8002ee6:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ee8:	61bb      	str	r3, [r7, #24]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ef0:	75fb      	strb	r3, [r7, #23]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d137      	bne.n	8002f7a <vTaskNotifyGiveFromISR+0xba>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <vTaskNotifyGiveFromISR+0xcc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11c      	bne.n	8002f4c <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc0a 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <vTaskNotifyGiveFromISR+0xd0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <vTaskNotifyGiveFromISR+0xd0>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <vTaskNotifyGiveFromISR+0xd4>)
 8002f3c:	441a      	add	r2, r3
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f000 fb98 	bl	800367a <vListInsertEnd>
 8002f4a:	e005      	b.n	8002f58 <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3318      	adds	r3, #24
 8002f50:	4619      	mov	r1, r3
 8002f52:	4811      	ldr	r0, [pc, #68]	; (8002f98 <vTaskNotifyGiveFromISR+0xd8>)
 8002f54:	f000 fb91 	bl	800367a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <vTaskNotifyGiveFromISR+0xdc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d909      	bls.n	8002f7a <vTaskNotifyGiveFromISR+0xba>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <vTaskNotifyGiveFromISR+0xb4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e002      	b.n	8002f7a <vTaskNotifyGiveFromISR+0xba>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <vTaskNotifyGiveFromISR+0xe0>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000148 	.word	0x20000148
 8002f90:	20000128 	.word	0x20000128
 8002f94:	2000004c 	.word	0x2000004c
 8002f98:	200000e0 	.word	0x200000e0
 8002f9c:	20000048 	.word	0x20000048
 8002fa0:	20000134 	.word	0x20000134

08002fa4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <xTaskNotifyStateClear+0x14>
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <xTaskNotifyStateClear+0x48>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e000      	b.n	8002fba <xTaskNotifyStateClear+0x16>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8002fbc:	f000 f906 	bl	80031cc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d106      	bne.n	8002fda <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e001      	b.n	8002fde <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002fde:	f000 f90d 	bl	80031fc <vPortExitCritical>

		return xReturn;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000048 	.word	0x20000048

08002ff0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3304      	adds	r3, #4
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb92 	bl	8003730 <uxListRemove>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	2201      	movs	r2, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4013      	ands	r3, r2
 8003026:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003028:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d10a      	bne.n	8003048 <prvAddCurrentTaskToDelayedList+0x58>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	481a      	ldr	r0, [pc, #104]	; (80030ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8003042:	f000 fb1a 	bl	800367a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003046:	e026      	b.n	8003096 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d209      	bcs.n	8003074 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3304      	adds	r3, #4
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f000 fb27 	bl	80036c0 <vListInsert>
}
 8003072:	e010      	b.n	8003096 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f000 fb1d 	bl	80036c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d202      	bcs.n	8003096 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6013      	str	r3, [r2, #0]
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000124 	.word	0x20000124
 80030a4:	20000048 	.word	0x20000048
 80030a8:	20000128 	.word	0x20000128
 80030ac:	2000010c 	.word	0x2000010c
 80030b0:	200000dc 	.word	0x200000dc
 80030b4:	200000d8 	.word	0x200000d8
 80030b8:	20000140 	.word	0x20000140
 80030bc:	00000000 	.word	0x00000000

080030c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b04      	subs	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3b04      	subs	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f023 0201 	bic.w	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b04      	subs	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <pxPortInitialiseStack+0x54>)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b14      	subs	r3, #20
 80030fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3b20      	subs	r3, #32
 8003106:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	08003119 	.word	0x08003119

08003118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
	__asm volatile
 800311e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003130:	e7fe      	b.n	8003130 <prvTaskExitError+0x18>

08003132 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <pxCurrentTCBConst2>)
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	6808      	ldr	r0, [r1, #0]
 8003138:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800313c:	f380 8809 	msr	PSP, r0
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f380 8811 	msr	BASEPRI, r0
 800314c:	f04e 0e0d 	orr.w	lr, lr, #13
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	f3af 8000 	nop.w
 8003158:	f3af 8000 	nop.w
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst2>:
 8003160:	20000048 	.word	0x20000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003164:	bf00      	nop

08003166 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003166:	485d      	ldr	r0, [pc, #372]	; (80032dc <vPortSetupTimerInterrupt+0x24>)
 8003168:	6800      	ldr	r0, [r0, #0]
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	f380 8808 	msr	MSP, r0
 8003170:	b662      	cpsie	i
 8003172:	b661      	cpsie	f
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	df00      	svc	0
 800317e:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003180:	bf00      	nop

08003182 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <xPortStartScheduler+0x36>)
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <xPortStartScheduler+0x36>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <xPortStartScheduler+0x36>)
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <xPortStartScheduler+0x36>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800319e:	f000 f88b 	bl	80032b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <xPortStartScheduler+0x3a>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031a8:	f7ff ffdd 	bl	8003166 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80031ac:	f7ff ffb4 	bl	8003118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000ed20 	.word	0xe000ed20
 80031bc:	20000028 	.word	0x20000028

080031c0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <vPortEnterCritical+0x2c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	4a03      	ldr	r2, [pc, #12]	; (80031f8 <vPortEnterCritical+0x2c>)
 80031ec:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	20000028 	.word	0x20000028

080031fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <vPortExitCritical+0x2c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <vPortExitCritical+0x2c>)
 800320a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <vPortExitCritical+0x2c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <vPortExitCritical+0x22>
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
	__asm volatile
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000028 	.word	0x20000028

0800322c <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800322c:	f3ef 8009 	mrs	r0, PSP
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <pxCurrentTCBConst>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800323c:	6010      	str	r0, [r2, #0]
 800323e:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003242:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003246:	f380 8811 	msr	BASEPRI, r0
 800324a:	f7fe fff9 	bl	8002240 <vTaskSwitchContext>
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	f380 8811 	msr	BASEPRI, r0
 8003256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	6808      	ldr	r0, [r1, #0]
 800325e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003262:	f380 8809 	msr	PSP, r0
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	4770      	bx	lr
 800326c:	f3af 8000 	nop.w

08003270 <pxCurrentTCBConst>:
 8003270:	20000048 	.word	0x20000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003274:	bf00      	nop

08003276 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
	__asm volatile
 800327c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800328e:	f7fe ff2b 	bl	80020e8 <xTaskIncrementTick>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <xPortSysTickHandler+0x3e>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	2300      	movs	r3, #0
 80032a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vPortSetupTimerInterrupt+0x18>)
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <vPortSetupTimerInterrupt+0x1c>)
 80032c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <vPortSetupTimerInterrupt+0x20>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	e000e014 	.word	0xe000e014
 80032d4:	0001193f 	.word	0x0001193f
 80032d8:	e000e010 	.word	0xe000e010
 80032dc:	e000ed08 	.word	0xe000ed08

080032e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80032ec:	f7fe fd94 	bl	8001e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <pvPortMalloc+0x114>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032f8:	f000 f8da 	bl	80034b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <pvPortMalloc+0x118>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d16d      	bne.n	80033e4 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800330e:	2208      	movs	r2, #8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f023 0307 	bic.w	r3, r3, #7
 8003326:	3308      	adds	r3, #8
 8003328:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d059      	beq.n	80033e4 <pvPortMalloc+0x104>
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <pvPortMalloc+0x11c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d854      	bhi.n	80033e4 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800333a:	4b31      	ldr	r3, [pc, #196]	; (8003400 <pvPortMalloc+0x120>)
 800333c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800333e:	4b30      	ldr	r3, [pc, #192]	; (8003400 <pvPortMalloc+0x120>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003344:	e004      	b.n	8003350 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <pvPortMalloc+0x82>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f1      	bne.n	8003346 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <pvPortMalloc+0x114>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	d03b      	beq.n	80033e4 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	2308      	movs	r3, #8
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	429a      	cmp	r2, r3
 800338c:	d90f      	bls.n	80033ae <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033a8:	68b8      	ldr	r0, [r7, #8]
 80033aa:	f000 f8e3 	bl	8003574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <pvPortMalloc+0x11c>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4a10      	ldr	r2, [pc, #64]	; (80033fc <pvPortMalloc+0x11c>)
 80033ba:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <pvPortMalloc+0x11c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <pvPortMalloc+0x124>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d203      	bcs.n	80033d0 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <pvPortMalloc+0x11c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <pvPortMalloc+0x124>)
 80033ce:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <pvPortMalloc+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	431a      	orrs	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033e4:	f7fe fd26 	bl	8001e34 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 80033e8:	68fb      	ldr	r3, [r7, #12]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20004954 	.word	0x20004954
 80033f8:	20004960 	.word	0x20004960
 80033fc:	20004958 	.word	0x20004958
 8003400:	2000494c 	.word	0x2000494c
 8003404:	2000495c 	.word	0x2000495c

08003408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d027      	beq.n	800346a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800341a:	2308      	movs	r3, #8
 800341c:	425b      	negs	r3, r3
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <vPortFree+0x6c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d115      	bne.n	800346a <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <vPortFree+0x6c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	43db      	mvns	r3, r3
 8003448:	401a      	ands	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800344e:	f7fe fce3 	bl	8001e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <vPortFree+0x70>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4413      	add	r3, r2
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <vPortFree+0x70>)
 800345e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f000 f887 	bl	8003574 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003466:	f7fe fce5 	bl	8001e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20004960 	.word	0x20004960
 8003478:	20004958 	.word	0x20004958

0800347c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <xPortGetFreeHeapSize+0x10>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	20004958 	.word	0x20004958

08003490 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8003494:	4b02      	ldr	r3, [pc, #8]	; (80034a0 <xPortGetMinimumEverFreeHeapSize+0x10>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	2000495c 	.word	0x2000495c

080034a4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034b6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80034ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <prvHeapInit+0xac>)
 80034be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3307      	adds	r3, #7
 80034ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <prvHeapInit+0xac>)
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <prvHeapInit+0xb0>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <prvHeapInit+0xb0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034fc:	2208      	movs	r2, #8
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0307 	bic.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <prvHeapInit+0xb4>)
 8003510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <prvHeapInit+0xb4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <prvHeapInit+0xb4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <prvHeapInit+0xb4>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <prvHeapInit+0xb8>)
 800353e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a09      	ldr	r2, [pc, #36]	; (800356c <prvHeapInit+0xbc>)
 8003546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <prvHeapInit+0xc0>)
 800354a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000014c 	.word	0x2000014c
 8003560:	2000494c 	.word	0x2000494c
 8003564:	20004954 	.word	0x20004954
 8003568:	2000495c 	.word	0x2000495c
 800356c:	20004958 	.word	0x20004958
 8003570:	20004960 	.word	0x20004960

08003574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <prvInsertBlockIntoFreeList+0xa8>)
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e002      	b.n	8003588 <prvInsertBlockIntoFreeList+0x14>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3f7      	bcc.n	8003582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d108      	bne.n	80035b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	441a      	add	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d118      	bne.n	80035fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <prvInsertBlockIntoFreeList+0xac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d00d      	beq.n	80035f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e008      	b.n	8003604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <prvInsertBlockIntoFreeList+0xac>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e003      	b.n	8003604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d002      	beq.n	8003612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	2000494c 	.word	0x2000494c
 8003620:	20004954 	.word	0x20004954

08003624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f103 0208 	add.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800363c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 0208 	add.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d6:	d103      	bne.n	80036e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e00c      	b.n	80036fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3308      	adds	r3, #8
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e002      	b.n	80036ee <vListInsert+0x2e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d9f6      	bls.n	80036e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d103      	bne.n	8003764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8003784:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003786:	e003      	b.n	8003790 <LoopCopyDataInit>

08003788 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 800378a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800378c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800378e:	3104      	adds	r1, #4

08003790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8003790:	4809      	ldr	r0, [pc, #36]	; (80037b8 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8003794:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003796:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003798:	d3f6      	bcc.n	8003788 <CopyDataInit>
	ldr	r2, =_sbss
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 800379c:	e002      	b.n	80037a4 <LoopFillZerobss>

0800379e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 800379e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037a0:	f842 3b04 	str.w	r3, [r2], #4

080037a4 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 80037a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037a8:	d3f9      	bcc.n	800379e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 80037aa:	f7fd fd25 	bl	80011f8 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 80037ae:	f7fc fd05 	bl	80001bc <main>
	bx	lr    
 80037b2:	4770      	bx	lr
	ldr	r3, =_sidata
 80037b4:	08003808 	.word	0x08003808
	ldr	r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037bc:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 80037c0:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 80037c4:	2000496c 	.word	0x2000496c

080037c8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037c8:	e7fe      	b.n	80037c8 <ADC1_2_IRQHandler>

080037ca <memset>:
 80037ca:	4603      	mov	r3, r0
 80037cc:	4402      	add	r2, r0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d100      	bne.n	80037d4 <memset+0xa>
 80037d2:	4770      	bx	lr
 80037d4:	f803 1b01 	strb.w	r1, [r3], #1
 80037d8:	e7f9      	b.n	80037ce <memset+0x4>
	...

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
